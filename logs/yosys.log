
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Parsing `blinky.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `blinky.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -blif blinky.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \top

2.2.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$blinky.v:16$1'.
     1/1: $0\counter[24:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\counter' using process `\top.$proc$blinky.v:16$1'.
  created $dff cell `$procdff$3' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$blinky.v:16$1'.
Cleaned up 0 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing SYNTH pass.

2.7.1. Executing PROC pass (convert processes to netlists).

2.7.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.7.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.7.1.3. Executing PROC_INIT pass (extract init attributes).

2.7.1.4. Executing PROC_ARST pass (detect async resets in processes).

2.7.1.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.7.1.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.7.1.7. Executing PROC_DFF pass (convert process syncs to FFs).

2.7.1.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.7.2. Executing OPT_EXPR pass (perform const folding).

2.7.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.7.4. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.7.5. Executing OPT pass (performing simple optimizations).

2.7.5.1. Executing OPT_EXPR pass (perform const folding).

2.7.5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.7.5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.5.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.7.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.7.5.8. Executing OPT_EXPR pass (perform const folding).

2.7.5.9. Finished OPT passes. (There is nothing left to do.)

2.7.6. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell top.$add$blinky.v:17$2 ($add).
Removed top 7 bits (of 32) from port Y of cell top.$add$blinky.v:17$2 ($add).

2.7.7. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$blinky.v:17$2 ($add).
  creating $alu model for $macc $add$blinky.v:17$2.
  creating $alu cell for $add$blinky.v:17$2: $auto$alumacc.cc:470:replace_alu$4
  created 1 $alu and 0 $macc cells.

2.7.8. Executing SHARE pass (SAT-based resource sharing).

2.7.9. Executing OPT pass (performing simple optimizations).

2.7.9.1. Executing OPT_EXPR pass (perform const folding).

2.7.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.7.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.9.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.7.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.7.9.8. Executing OPT_EXPR pass (perform const folding).

2.7.9.9. Finished OPT passes. (There is nothing left to do.)

2.7.10. Executing FSM pass (extract and optimize FSM).

2.7.10.1. Executing FSM_DETECT pass (finding FSMs in design).

2.7.10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.7.10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.7.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.7.10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.7.10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.7.10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.7.10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.7.11. Executing OPT pass (performing simple optimizations).

2.7.11.1. Executing OPT_EXPR pass (perform const folding).

2.7.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.7.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.7.11.5. Finished fast OPT passes.

2.7.12. Executing MEMORY pass.

2.7.12.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.7.12.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.7.12.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.7.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.7.12.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.7.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.8. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.9. Executing TECHMAP pass (map to technology primitives).

2.9.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.
No more expansions possible.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.10.5. Finished fast OPT passes.

2.11. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.12.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.12.8. Executing OPT_EXPR pass (perform const folding).

2.12.9. Finished OPT passes. (There is nothing left to do.)

2.13. Executing TECHMAP pass (map to technology primitives).

2.13.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.13.2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.
Mapping top.$procdff$3 ($dff) with simplemap.

2.13.3. Executing AST frontend in derive mode using pre-parsed AST for module `\_80_ice40_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 25
Parameter \Y_WIDTH = 25
Generating RTLIL representation for module `$paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=25\Y_WIDTH=25'.

2.13.4. Continuing TECHMAP pass.
Mapping top.$auto$alumacc.cc:470:replace_alu$4 using $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=25\Y_WIDTH=25.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84 ($xor) with simplemap.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83 ($mux) with simplemap.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$4.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$82 ($not) with simplemap.
Mapping top.$auto$alumacc.cc:470:replace_alu$4.B_conv ($pos) with simplemap.
Mapping top.$auto$alumacc.cc:470:replace_alu$4.A_conv ($pos) with simplemap.
No more expansions possible.

2.14. Executing ICE40_OPT pass (performing simple optimizations).

2.14.1. Running ICE40 specific optimizations.

2.14.2. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$110' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [0] = \counter [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$111' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [1] = \counter [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$86' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [1] = \counter [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$112' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [2] = \counter [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$87' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [2] = \counter [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$113' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [3] = \counter [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$88' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [3] = \counter [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$114' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [4] = \counter [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$89' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [4] = \counter [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$115' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [5] = \counter [5]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$90' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [5] = \counter [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$116' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [6] = \counter [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$91' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [6] = \counter [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$117' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [7] = \counter [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$92' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [7] = \counter [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$118' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [8] = \counter [8]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$93' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [8] = \counter [8]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$119' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [9] = \counter [9]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$94' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [9] = \counter [9]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$120' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [10] = \counter [10]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$95' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [10] = \counter [10]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$121' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [11] = \counter [11]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$96' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [11] = \counter [11]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$122' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [12] = \counter [12]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$97' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [12] = \counter [12]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$123' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [13] = \counter [13]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$98' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [13] = \counter [13]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$124' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [14] = \counter [14]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$99' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [14] = \counter [14]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$125' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [15] = \counter [15]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$100' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [15] = \counter [15]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$126' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [16] = \counter [16]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$101' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [16] = \counter [16]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$127' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [17] = \counter [17]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$102' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [17] = \counter [17]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$128' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [18] = \counter [18]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$103' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [18] = \counter [18]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$129' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [19] = \counter [19]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$104' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [19] = \counter [19]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$130' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [20] = \counter [20]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$105' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [20] = \counter [20]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$131' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [21] = \counter [21]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$106' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [21] = \counter [21]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$132' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [22] = \counter [22]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$107' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [22] = \counter [22]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$133' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [23] = \counter [23]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$108' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [23] = \counter [23]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$134' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$83_Y [24] = \counter [24]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$109' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$4.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$84_Y [24] = \counter [24]'.

2.14.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.14.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.14.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$85'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$4.slice[24].carry'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$135'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$136'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$137'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$138'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$139'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$140'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$141'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$142'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$143'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$144'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$145'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$146'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$147'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$148'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$149'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$150'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$151'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$152'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$153'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$154'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$155'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$156'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$157'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$158'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$159'.

2.14.6. Rerunning OPT passes. (Removed registers in this run.)

2.14.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell top.$auto$alumacc.cc:470:replace_alu$4.slice[0].carry: CO=\counter [0]
Mapping SB_LUT4 cell top.$auto$alumacc.cc:470:replace_alu$4.slice[1].adder back to logic.

2.14.8. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$164' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$160 [3] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$163' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$160 [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$171' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$169 [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$162' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$160 [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$161' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$160 [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$170' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$169 [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$175' (01?) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$174 [0] = \counter [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$168' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$160 [7] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$167' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$160 [6] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$173' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$169 [3] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$166' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$160 [5] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$165' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$160 [4] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$172' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$169 [2] = 1'1'.

2.14.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.14.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.14.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.14.12. Rerunning OPT passes. (Removed registers in this run.)

2.14.13. Running ICE40 specific optimizations.

2.14.14. Executing OPT_EXPR pass (perform const folding).

2.14.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.14.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.14.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.14.18. Finished OPT passes. (There is nothing left to do.)

2.15. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.16. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$58 to $_DFFE_PP_ for $0\counter[24:0] [1] -> \counter [1].

2.17. Executing TECHMAP pass (map to technology primitives).

2.17.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$57 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$58 using \$_DFFE_PP_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$59 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$60 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$61 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$62 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$63 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$64 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$65 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$66 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$67 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$68 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$69 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$70 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$71 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$72 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$73 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$74 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$75 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$76 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$77 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$78 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$79 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$80 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$81 using \$_DFF_P_.
No more expansions possible.

2.18. Executing OPT_EXPR pass (perform const folding).
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$183' (?0) in module `\top' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$181 = \counter [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$178' (x??) in module `\top' with constant driver `$0\counter[24:0] [1] = $auto$simplemap.cc:309:simplemap_lut$174 [1]'.

2.19. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.20. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.

2.21. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.

2.22. Executing ICE40_OPT pass (performing simple optimizations).

2.22.1. Running ICE40 specific optimizations.

2.22.2. Executing OPT_EXPR pass (perform const folding).

2.22.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.6. Finished OPT passes. (There is nothing left to do.)

2.23. Executing TECHMAP pass (map to technology primitives).

2.23.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.
No more expansions possible.

2.24. Executing ABC pass (technology mapping using ABC).

2.24.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 2 wires to a netlist network with 1 inputs and 1 outputs.

2.24.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + dc2 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime -o 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs 
ABC: + lutpack 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.24.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        2
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        1
ABC RESULTS:          output signals:        1
Removing temp directory.
Removed 0 unused cells and 2 unused wires.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.25.2. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 1
Parameter \LUT = 2'01
Generating RTLIL representation for module `$paramod\$lut\WIDTH=1\LUT=2'01'.

2.25.3. Continuing TECHMAP pass.
Mapping top.$abc$223$auto$blifparse.cc:375:parse_blif$224 using $paramod\$lut\WIDTH=1\LUT=2'01.
No more expansions possible.
Removed 0 unused cells and 2 unused wires.

2.26. Executing HIERARCHY pass (managing design hierarchy).

2.26.1. Analyzing design hierarchy..
Top module:  \top

2.26.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.27. Printing statistics.

=== top ===

   Number of wires:                  6
   Number of wire bits:             78
   Number of public wires:           4
   Number of public wire bits:      28
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 73
     SB_CARRY                       23
     SB_DFF                         24
     SB_DFFE                         1
     SB_LUT4                        25

2.28. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.29. Executing BLIF backend.

End of script. Logfile hash: 2bea017e7e
CPU: user 0.21s system 0.02s, MEM: 64.44 MB total, 37.39 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 45% 9x read_verilog (0 sec), 13% 1x share (0 sec), ...
